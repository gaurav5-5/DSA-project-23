# Set the minimum required version of CMake
cmake_minimum_required(VERSION 3.27)

# Set the project name and version
project(spellcheck VERSION 1.0)

# Set the C standard to use
set(CMAKE_C_STANDARD 99)
set(CMAKE_C_STANDARD_REQUIRED True)

# Add the executable target
add_executable(spellcheck)

# include directories
target_include_directories(${PROJECT_NAME} PUBLIC ${PROJECT_SOURCE_DIR}/include)

# get source files
file(GLOB_RECURSE SOURCES src/*.c)

# Add the source files to the executable target
target_sources(${PROJECT_NAME} PRIVATE ${SOURCES} ${RESOURCES})

# Copy res folder to build directory if build succeeds
add_custom_command(TARGET spellcheck POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_directory
    ${CMAKE_SOURCE_DIR}/res $<TARGET_FILE_DIR:spellcheck>/res)

# Copy executable and res folder to ROOT/bin
add_custom_command(TARGET spellcheck POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_directory
    ${CMAKE_SOURCE_DIR}/res ${CMAKE_SOURCE_DIR}/bin/res)

add_custom_command(TARGET spellcheck POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy
    $<TARGET_FILE:spellcheck> ${CMAKE_SOURCE_DIR}/bin)

# set the compiler flags
target_compile_options(spellcheck PRIVATE -Wall -Wextra -Wpedantic -Werror)

# set the link flags
target_link_options(spellcheck PRIVATE -Wall -Wextra -Wpedantic -Werror)

# change generator to Ninja
set(CMAKE_GENERATOR "Ninja")

project(sfa VERSION 1.0)

set(CMAKE_C_STANDARD 99)
set(CMAKE_C_STANDARD_REQUIRED True)

add_executable(sfa)

target_compile_options(sfa PRIVATE -Wall -Wextra -pedantic -Werror -O2)

target_sources(sfa PRIVATE src/sfa.c)

add_custom_command(TARGET sfa POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_directory
    ${CMAKE_SOURCE_DIR}/res $<TARGET_FILE_DIR:sfa>/res)

add_custom_command(TARGET sfa POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_directory
    ${CMAKE_SOURCE_DIR}/res ${CMAKE_SOURCE_DIR}/bin/res)

add_custom_command(TARGET sfa POST_BUILD 
    COMMAND ${CMAKE_COMMAND} -E copy
    $<TARGET_FILE:sfa> ${CMAKE_SOURCE_DIR}/bin)
